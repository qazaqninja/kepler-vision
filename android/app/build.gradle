plugins {
    id "com.android.application"
    id "dev.flutter.flutter-gradle-plugin"
    id "org.jetbrains.kotlin.android"
    id 'com.google.gms.google-services'
    
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = 5
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.5'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "kz.kepler_vision.app"

        signingConfigs {
        release {
            // Use debug signing until we have a proper keystore
            keyAlias = keystoreProperties['keyAlias'] ?: 'androiddebugkey'
            keyPassword = keystoreProperties['keyPassword'] ?: 'android'
            storeFile = keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : file("${System.properties['user.home']}/.android/debug.keystore")
            storePassword = keystoreProperties['storePassword'] ?: 'android'
        }
    }

    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationId "kz.kepler_vision.app"
            resValue "string", "app_name", "Kepler Vision"
        }
        staging {
            dimension "flavor-type"
            applicationId "kz.kepler_vision.app"
            resValue "string", "app_name", "Kepler Vision"
        }
        prod {
            dimension "flavor-type"
            applicationId "kz.kepler_vision.app"
            resValue "string", "app_name", "Kepler Vision"
        }
    }

    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "kz.kepler_vision.app" 
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        // minSdkVersion flutter.minSdkVersion
        minSdkVersion 24
        targetSdkVersion flutter.targetSdkVersion
        versionCode 5
        versionName flutterVersionName
        
        // Enable MultiDex
        multiDexEnabled true
    }

    // Configure packaging options to exclude problematic files
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt',
                         'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0',
                         'META-INF/*.kotlin_module']
        }
    }
    
    // Add configuration to handle duplicate classes
    configurations.all {
        // Exclude problematic dependencies
        exclude group: 'com.google.android.play', module: 'core'
        exclude group: 'com.google.android.play', module: 'feature-delivery'
    }

    buildTypes {
        release {
            // Change from using debug signing config to release signing config
            signingConfig signingConfigs.release
            
            // Enable minification with debug info preservation
            minifyEnabled true
            shrinkResources true
            
            // Ensure mapping file is generated but keep code readable
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        
        debug {
            // For debug builds, ensure no shrinking
            minifyEnabled false
            shrinkResources false
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:33.4.0')
    implementation 'com.google.firebase:firebase-analytics'
    
    // Add MultiDex support
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // Remove all Play Core libraries for now
    // We can add them back later once the app builds successfully
}
